        -:    0:Source:/home/ysvirin/Documents/simple-logger/libs/src/logger.cpp
        -:    0:Graph:/home/ysvirin/Documents/simple-logger/build/libs/src/CMakeFiles/logger_lib.dir/logger.cpp.gcno
        -:    0:Data:/home/ysvirin/Documents/simple-logger/build/libs/src/CMakeFiles/logger_lib.dir/logger.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "logger.h"
        -:    2:#include "error_handle.h"
        -:    3:
        -:    4:#include <iostream>
        -:    5:#include <fcntl.h>  //for O_* constants
        -:    6:#include <unistd.h> //for getpid()
        -:    7:#include <pthread.h>
        -:    8:
        -:    9:Logger* Logger::_loggerInstance = nullptr;
        -:   10:
function _ZN6Logger11getInstanceER5Agent called 3 returned 100% blocks executed 90%
        3:   11:Logger* Logger::getInstance(Agent& agent)
        -:   12:{
        -:   13:    static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
        -:   14:
        3:   15:    agent.a_pthread_mutex_lock(&mutex);
call    0 returned 100%
        3:   16:    if(_loggerInstance == nullptr)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:   17:        _loggerInstance = new Logger(agent);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        3:   18:    agent.a_pthread_mutex_unlock(&mutex);
call    0 returned 100%
        -:   19:
        3:   20:    return _loggerInstance;
        -:   21:}
        -:   22:
        -:   23://--------------------------------------------------
        -:   24:/**
        -:   25: * Converts MSG_TYPE to std::string 
        -:   26: * for logging
        -:   27: * 
        -:   28: * @param msgType Type of message for
        -:   29: *                  converting
        -:   30: * 
        -:   31: * @return std::string, which represents message type
        -:   32:*/
function _ZN6Logger10_typeToStrB5cxx11ENS_8MSG_TYPEE called 1 returned 100% blocks executed 29%
        1:   33:std::string Logger::_typeToStr(MSG_TYPE msgType)
        -:   34:{
        1:   35:    switch(msgType)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
        -:   36:    {
        1:   37:        case MSG_TYPE::MSG_INFO: return "----------{ INFO }------------\n";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
        -:   38:
    #####:   39:        case MSG_TYPE::MSG_ERROR: return "XXXXXXXXXXX{ ERROR }XXXXXXXXXXX\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   40:
    #####:   41:        case MSG_TYPE::MSG_WARNING: return "!!!!!!!!!!{ WARNING }!!!!!!!!!!\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   42:    }
    #####:   43:}
        -:   44://--------------------------------------------------
        -:   45:
        -:   46://--------------------------------------------------
        -:   47:/**
        -:   48: * Constructor of RAII-class for POSIX-sem.
        -:   49: * Opens semaphore
        -:   50: */
function _ZN6LoggerC2ER5Agent called 2 returned 100% blocks executed 67%
        2:   51:Logger::Logger(Agent& agent)
        -:   52:{
        2:   53:    const mode_t permissions = 0666;
        2:   54:    const short semaphoreStartValue = 1;
        2:   55:    _semaphore = agent.a_sem_open(_semaphoreName, O_CREAT, permissions, semaphoreStartValue);
call    0 returned 100%
        2:   56:    if(_semaphore == SEM_FAILED)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   57:        exitErr("sem_open failed", agent);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        2:   58:}
        -:   59://--------------------------------------------------
        -:   60:
        -:   61://--------------------------------------------------
        -:   62:/**
        -:   63: * Writing into log. First of all, this method 
        -:   64: * logs message type and then message
        -:   65: * 
        -:   66: * @param msgType Type of displaying message
        -:   67: * @param message Message for logging
        -:   68: */
function _ZN6Logger8printLogENS_8MSG_TYPEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 90%
        1:   69:void Logger::printLog(MSG_TYPE msgType, const std::string& message)
        -:   70:{
        1:   71:    sem_wait(_semaphore);
call    0 returned 100%
        1:   72:    std::cout << _typeToStr(msgType);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        1:   73:    std::cout << "PROCESS ID -->" << getpid() << std::endl;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        1:   74:    std::cout << "THREAD ID -->" << pthread_self() << std::endl;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        1:   75:    std::cout << message;
call    0 returned 100%
        1:   76:    std::cout << "####################" << std::endl << std::endl << std::endl;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        1:   77:    sem_post(_semaphore);
call    0 returned 100%
        1:   78:}
        -:   79://--------------------------------------------------
        -:   80:
function _ZN6Logger14deleteInstanceEv called 1 returned 100% blocks executed 100%
        1:   81:void Logger::deleteInstance()
        -:   82:{
        1:   83:    delete _loggerInstance;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
        1:   84:    _loggerInstance = nullptr;
        1:   85:}
        -:   86:
        -:   87://--------------------------------------------------
        -:   88:/**
        -:   89: * Destructor of RAII-class for POSIX-sem.
        -:   90: */
function _ZN6LoggerD2Ev called 1 returned 100% blocks executed 100%
        2:   91:Logger::~Logger()
        -:   92:{
        1:   93:    sem_close(_semaphore);
call    0 returned 100%
        1:   94:    sem_unlink(_semaphoreName);
call    0 returned 100%
        1:   95:    std::cout << "-->Destructor was called..." << std::endl;
call    0 returned 100%
call    1 returned 100%
function _GLOBAL__sub_I__ZN6Logger15_loggerInstanceE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        4:   96:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:   97://--------------------------------------------------
